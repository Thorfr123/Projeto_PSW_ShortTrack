-- Cria a schema para as tabelas do projeto
CREATE SCHEMA IF NOT EXISTS projeto;
-- Cria a tabela para as contas
CREATE TABLE IF NOT EXISTS projeto.account ();
ALTER TABLE projeto.account ADD COLUMN IF NOT EXISTS email character varying(254) NOT NULL;
ALTER TABLE projeto.account ADD COLUMN IF NOT EXISTS password character varying(256) NOT NULL;
ALTER TABLE projeto.account ADD COLUMN IF NOT EXISTS name character varying(64);
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='account_pkey')) THEN
		ALTER TABLE ONLY projeto.account ADD CONSTRAINT account_pkey PRIMARY KEY (email);
	END IF;
END $$;
-- Cria a tabela para as tarefas pessoais
CREATE TABLE IF NOT EXISTS projeto.personal_tasks ();
ALTER TABLE projeto.personal_tasks ADD COLUMN IF NOT EXISTS id integer NOT NULL;
ALTER TABLE projeto.personal_tasks ADD COLUMN IF NOT EXISTS list_id integer NOT NULL;DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='personal_tasks_list_id_fkey')) THEN
		ALTER TABLE ONLY projeto.personal_tasks ADD CONSTRAINT personal_tasks_list_id_fkey FOREIGN KEY (list_id)
			REFERENCES projeto.personal_lists (id) ON DELETE CASCADE ON UPDATE CASCADE;
	END IF;
END $$;
ALTER TABLE projeto.personal_tasks ADD COLUMN IF NOT EXISTS name character varying(128) NOT NULL;
ALTER TABLE projeto.personal_tasks ADD COLUMN IF NOT EXISTS description character varying(1024);
ALTER TABLE projeto.personal_tasks ADD COLUMN IF NOT EXISTS created_date date;
ALTER TABLE projeto.personal_tasks ADD COLUMN IF NOT EXISTS deadline_date date;
ALTER TABLE projeto.personal_tasks ADD COLUMN IF NOT EXISTS state boolean NOT NULL;
CREATE SEQUENCE IF NOT EXISTS projeto.tasks_id_seq
	AS integer
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1;
ALTER SEQUENCE projeto.tasks_id_seq OWNED BY projeto.personal_tasks.id;
ALTER TABLE ONLY projeto.personal_tasks ALTER COLUMN id SET DEFAULT nextval('projeto.tasks_id_seq'::regclass);
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='tasks_pkey')) THEN
		ALTER TABLE ONLY projeto.personal_tasks ADD CONSTRAINT tasks_pkey PRIMARY KEY (id);
	END IF;
END $$;
-- Cria a tabela para as listas pessoais
CREATE TABLE IF NOT EXISTS projeto.personal_lists ();
ALTER TABLE projeto.personal_lists ADD COLUMN IF NOT EXISTS id integer NOT NULL;
ALTER TABLE projeto.personal_lists ADD COLUMN IF NOT EXISTS email character varying (254) NOT NULL;
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='personal_lists_email_fkey')) THEN
		ALTER TABLE ONLY projeto.personal_lists ADD CONSTRAINT personal_lists_email_fkey FOREIGN KEY (email)
			REFERENCES projeto.account (email) ON DELETE CASCADE ON UPDATE CASCADE;
	END IF;
END $$;
ALTER TABLE projeto.personal_lists ADD COLUMN IF NOT EXISTS name character varying (128) NOT NULL;
CREATE SEQUENCE IF NOT EXISTS projeto.lists_id_seq
	AS integer
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1;
ALTER SEQUENCE projeto.lists_id_seq OWNED BY projeto.personal_lists.id;
ALTER TABLE ONLY projeto.personal_lists ALTER COLUMN id SET DEFAULT nextval('projeto.lists_id_seq'::regclass);
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='lists_pkey')) THEN
		ALTER TABLE ONLY projeto.personal_lists ADD CONSTRAINT lists_pkey PRIMARY KEY (id);
	END IF;
END $$;
-- Cria a tabela para os grupos
CREATE TABLE IF NOT EXISTS projeto.groups ();
ALTER TABLE projeto.groups ADD COLUMN IF NOT EXISTS id integer NOT NULL;
CREATE SEQUENCE IF NOT EXISTS projeto.groups_id_seq
	AS integer
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1;
ALTER SEQUENCE projeto.groups_id_seq OWNED BY projeto.groups.id;
ALTER TABLE ONLY projeto.groups ALTER COLUMN id SET DEFAULT nextval('projeto.groups_id_seq'::regclass);
ALTER TABLE projeto.groups ADD COLUMN IF NOT EXISTS name character varying (128) NOT NULL;
ALTER TABLE projeto.groups ADD COLUMN IF NOT EXISTS manager character varying (254) NOT NULL;
ALTER TABLE projeto.groups ADD COLUMN IF NOT EXISTS members character varying (254) [];
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='groups_manager_fkey')) THEN
		ALTER TABLE ONLY projeto.groups ADD CONSTRAINT groups_manager_fkey FOREIGN KEY (manager)
			REFERENCES projeto.account (email) ON DELETE CASCADE ON UPDATE CASCADE;
	END IF;
END $$;
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='groups_pkey')) THEN
		ALTER TABLE ONLY projeto.groups ADD CONSTRAINT groups_pkey PRIMARY KEY (id);
	END IF;
END $$;
-- Cria a tabela para as tarefas de grupo
CREATE TABLE IF NOT EXISTS projeto.group_tasks ();
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS id integer NOT NULL;
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS group_id integer NOT NULL;
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='group_tasks_group_id_fkey')) THEN
		ALTER TABLE ONLY projeto.group_tasks ADD CONSTRAINT group_tasks_group_id_fkey FOREIGN KEY (group_id)
			REFERENCES projeto.groups (id) ON DELETE CASCADE ON UPDATE CASCADE;
	END IF;
END $$;
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS assigned_to character varying (254);
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='group_tasks_assigned_to_fkey')) THEN
		ALTER TABLE ONLY projeto.group_tasks ADD CONSTRAINT group_tasks_assigned_to_fkey FOREIGN KEY (assigned_to)
			REFERENCES projeto.account (email) ON DELETE SET NULL ON UPDATE CASCADE;
	END IF;
END $$;
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS name character varying(128) NOT NULL;
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS description character varying(1024);
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS created_date date;
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS deadline_date date;
ALTER TABLE projeto.group_tasks ADD COLUMN IF NOT EXISTS state boolean NOT NULL;
ALTER SEQUENCE projeto.tasks_id_seq OWNED BY projeto.group_tasks.id;
ALTER TABLE ONLY projeto.group_tasks ALTER COLUMN id SET DEFAULT nextval('projeto.tasks_id_seq'::regclass);
DO $$
BEGIN
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='group_tasks_pkey')) THEN
		ALTER TABLE ONLY projeto.group_tasks ADD CONSTRAINT group_tasks_pkey PRIMARY KEY (id);
	END IF;
END $$;
-- Cria a tabela para as notificações
CREATE TABLE IF NOT EXISTS projeto.notifications ();
ALTER TABLE projeto.notifications ADD COLUMN IF NOT EXISTS id integer NOT NULL;
ALTER TABLE projeto.notifications ADD COLUMN IF NOT EXISTS type integer NOT NULL;
ALTER TABLE projeto.notifications ADD COLUMN IF NOT EXISTS source character varying (254);
ALTER TABLE projeto.notifications ADD COLUMN IF NOT EXISTS destination character varying (254);
ALTER TABLE projeto.notifications ADD COLUMN IF NOT EXISTS group_id integer;
ALTER TABLE projeto.notifications ADD COLUMN IF NOT EXISTS task_id integer;
CREATE SEQUENCE IF NOT EXISTS projeto.notifications_id_seq
	AS integer
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1;
ALTER SEQUENCE projeto.notifications_id_seq OWNED BY projeto.notifications.id;
ALTER TABLE ONLY projeto.notifications ALTER COLUMN id SET DEFAULT nextval('projeto.notifications_id_seq'::regclass);
DO $$
BEGIN
	-- Adiciona o id como primary key
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='notifications_pkey')) THEN
		ALTER TABLE ONLY projeto.notifications ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);
	END IF;
	-- Adiciona a referencia da source a uma conta
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='notifications_source_fkey')) THEN
		ALTER TABLE ONLY projeto.notifications ADD CONSTRAINT notifications_source_fkey FOREIGN KEY (source)
			REFERENCES projeto.account (email) ON DELETE CASCADE ON UPDATE CASCADE;
	END IF;
	-- Adiciona a referencia do destino a uma conta
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='notifications_destination_fkey')) THEN
		ALTER TABLE ONLY projeto.notifications ADD CONSTRAINT notifications_destination_fkey FOREIGN KEY (destination)
			REFERENCES projeto.account (email) ON DELETE CASCADE ON UPDATE CASCADE;
	END IF;
	-- Adiciona a referencia do group id ao grupo
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='notifications_group_id_fkey')) THEN
		ALTER TABLE ONLY projeto.notifications ADD CONSTRAINT notifications_group_id_fkey FOREIGN KEY (group_id)
			REFERENCES projeto.groups (id) ON DELETE CASCADE;
	END IF;
	-- Adiciona a referencia da group task id à group task
	IF (SELECT NOT EXISTS(SELECT 1 FROM pg_catalog.pg_constraint WHERE conname='notifications_task_id_fkey')) THEN
		ALTER TABLE ONLY projeto.notifications ADD CONSTRAINT notifications_task_id_fkey FOREIGN KEY (task_id)
			REFERENCES projeto.group_tasks (id) ON DELETE CASCADE;
	END IF;
END $$;